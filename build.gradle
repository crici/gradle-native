//buildscript {
//	repositories {
//		if (!file('../docs-gradle-plugins').exists()) {
//			maven {
//				name = "GitHubPackages"
//				url = "https://maven.pkg.github.com/nokeedev/docs-gradle-plugins"
//				credentials {
//					username = System.getenv("GITHUB_ACTOR")
//					password = System.getenv("GITHUB_TOKEN")
//				}
//				mavenContent {
//					includeModule('dev.nokee.docs', 'docs-gradle-plugins')
//				}
//			}
//		}
//		gradlePluginPortal()
//		maven { url = 'https://repo.eclipse.org/content/groups/releases/' }
//		mavenCentral()
//	}
//	dependencies {
//		classpath 'dev.nokee.docs:docs-gradle-plugins:latest.release'
//	}
//}

import org.gradle.util.VersionNumber

class Version {
	private VersionNumber delegate = null
	private final ProjectLayout projectLayout

	Version(ProjectLayout projectLayout) {
		this.projectLayout = projectLayout
	}

	@Override
	String toString() {
		maybeLoad()
		return delegate.toString()
	}

	private void maybeLoad() {
		if (delegate == null) {
			if (System.getProperties().containsKey("release")) {
				delegate = VersionNumber.parse(loadBaseVersion())
			} else {
				delegate = VersionNumber.parse("${loadBaseVersion()}-${loadQualifier()}")
			}
		}
	}

	private String loadBaseVersion() {
		return projectLayout.projectDirectory.file('version.txt').asFile.text.trim()
	}

	private String loadQualifier() {
		// CI macOS is using a version that prompt a shorter value by 1 char... Tabar...
		def process = "git rev-parse --short=8 HEAD".execute(null, projectLayout.projectDirectory.asFile)
		process.waitFor()
		def result = process.in.text.trim()
		return result
	}
}

def v = new Version(layout)
allprojects {
	version = v
	group = 'dev.nokee'
}

// Cleans $buildDir/tmp/test files on project check
subprojects {
	plugins.withType(LifecycleBasePlugin) {
		def cleanTestFiles = tasks.register('cleanTestFiles', Delete) {
			delete(layout.buildDirectory.file('tmp/test files'))
		}

		tasks.withType(Test).configureEach {
			mustRunAfter(cleanTestFiles)
		}

		tasks.named(LifecycleBasePlugin.CHECK_TASK_NAME) {
			dependsOn cleanTestFiles
		}
	}
}

// Configure gradlePlugin
subprojects {
	pluginManager.withPlugin('dev.gradleplugins.java-gradle-plugin') {
		gradlePlugin {
			compatibility {
				minimumGradleVersion = project.minimumGradleVersion
			}
			java {
				withJavadocJar()
				withSourcesJar()
			}
		}
	}
}

// Configure javadoc tasks
subprojects {
	tasks.withType(Javadoc).configureEach {
		if (name == 'javadoc') {
			exclude('**/internal/**')

			StandardJavadocDocletOptions options = it.options as StandardJavadocDocletOptions
			options.setEncoding("utf-8")
			options.setDocEncoding("utf-8")
			options.setCharSet("utf-8")
			options.links("https://docs.oracle.com/javase/8/docs/api", "https://docs.gradle.org/${minimumGradleVersion}/javadoc/")
		}
	}
}

// Configure functionalTest
subprojects {
	pluginManager.withPlugin('dev.gradleplugins.java-gradle-plugin') {
		apply plugin: 'dev.gradleplugins.gradle-plugin-functional-test'
		functionalTest {
			testingStrategies = [strategies.coverageForMinimumVersion, strategies.coverageForLatestGlobalAvailableVersion, strategies.coverageForLatestNightlyVersion]
			dependencies {
				implementation spockFramework()
				implementation gradleFixtures()
			}
		}
	}
}

// Configure test
subprojects {
	pluginManager.withPlugin('dev.gradleplugins.java-gradle-plugin') {
		apply plugin: 'dev.gradleplugins.gradle-plugin-unit-test'
		test {
			dependencies {
				implementation spockFramework()
				implementation groovy()
			}
		}
	}
}

// Configure JUnit 5 compatibility
subprojects {
	tasks.withType(Test).configureEach { it.useJUnitPlatform() }
}

// Enable lombok on all subprojects
subprojects { project ->
	def addLombokDependency = { Configuration configuration ->
		project.dependencies.add(configuration.name, "org.projectlombok:lombok:${lombokVersion}" as String)
	}
	configurations.matching { it.name.toLowerCase().endsWith('compileonly') }.all(addLombokDependency)
	configurations.matching { it.name.toLowerCase().endsWith('annotationprocessor') }.all(addLombokDependency)
}

// Configure general artifact repositories
subprojects {
	repositories {
		jcenter()
		mavenCentral()
		gradlePluginDevelopment()
	}
}
