buildscript {
	repositories {
		jcenter()
		maven { url = 'subprojects/distributions/build/repository' }
		maven { url = 'https://repo.nokeedev.net/snapshot' }
		maven { url = 'https://repo.nokeedev.net/release' }
	}
	dependencies {
		classpath 'dev.gradleplugins:documentation-kit:latest.integration'
	}
}

import org.gradle.util.VersionNumber

import static dev.gradleplugins.GradleRuntimeCompatibility.*

class Version {
	private VersionNumber delegate = null
	private final ProjectLayout projectLayout

	Version(ProjectLayout projectLayout) {
		this.projectLayout = projectLayout
	}

	@Override
	String toString() {
		maybeLoad()
		return delegate.toString()
	}

	private void maybeLoad() {
		if (delegate == null) {
			if (System.getProperties().containsKey("release")) {
				delegate = VersionNumber.parse(loadBaseVersion())
			} else {
				delegate = VersionNumber.parse("${loadBaseVersion()}-${loadQualifier()}")
			}
		}
	}

	private String loadBaseVersion() {
		return projectLayout.projectDirectory.file('version.txt').asFile.text.trim()
	}

	private String loadQualifier() {
		// CI macOS is using a version that prompt a shorter value by 1 char... Tabar...
		def process = "git rev-parse --short=8 HEAD".execute(null, projectLayout.projectDirectory.asFile)
		process.waitFor()
		def result = process.in.text.trim()
		return result
	}
}

def v = new Version(layout)
allprojects {
	version = v
	group = 'dev.nokee'
}

// Cleans $buildDir/tmp/test files on project check
subprojects {
	plugins.withType(LifecycleBasePlugin) {
		def cleanTestFiles = tasks.register('cleanTestFiles', Delete) {
			delete(layout.buildDirectory.file('tmp/test files'))
		}

		tasks.withType(Test).configureEach {
			mustRunAfter(cleanTestFiles)
		}

		tasks.named(LifecycleBasePlugin.CHECK_TASK_NAME) {
			dependsOn cleanTestFiles
		}
	}
}

// Configure gradlePlugin
subprojects {
	pluginManager.withPlugin('dev.gradleplugins.java-gradle-plugin') {
		gradlePlugin {
			compatibility {
				minimumGradleVersion = project.minimumGradleVersion
			}
			java {
				withJavadocJar()
				withSourcesJar()
			}
		}
	}
	pluginManager.withPlugin('java-library') {
		java {
			sourceCompatibility = minimumJavaVersionFor(minimumGradleVersion)
			targetCompatibility = minimumJavaVersionFor(minimumGradleVersion)
		}
	}
}

// Configure functionalTest
subprojects {
	pluginManager.withPlugin('dev.gradleplugins.java-gradle-plugin') {
		apply plugin: 'dev.gradleplugins.gradle-plugin-functional-test'
		functionalTest {
			testingStrategies = [strategies.coverageForMinimumVersion, strategies.coverageForLatestGlobalAvailableVersion, strategies.coverageForLatestNightlyVersion]
			dependencies {
				implementation project(':internalTesting')
				implementation spockFramework()
				implementation gradleFixtures()
			}
		}
	}
}

// Configure test for java-gradle-plugin
subprojects {
	pluginManager.withPlugin('dev.gradleplugins.java-gradle-plugin') {
		apply plugin: 'dev.gradleplugins.gradle-plugin-unit-test'
		test {
			dependencies {
				implementation project(':internalTesting')
				implementation spockFramework()
				implementation groovy()
			}
		}
	}
}

// Configure test for java-library
subprojects {
	pluginManager.withPlugin('java-library') {
		dependencies {
			testImplementation project(':internalTesting')
		}
	}
}

// Configure JUnit 5 compatibility
subprojects {
	tasks.withType(Test).configureEach { it.useJUnitPlatform() }
}

// Enable lombok on all subprojects
subprojects { project ->
	def addLombokDependency = { Configuration configuration ->
		project.dependencies.add(configuration.name, "org.projectlombok:lombok:${lombokVersion}" as String)
	}
	configurations.matching { it.name.toLowerCase().endsWith('compileonly') }.all(addLombokDependency)
	configurations.matching { it.name.toLowerCase().endsWith('annotationprocessor') }.all(addLombokDependency)
}

// Configure general artifact repositories
subprojects {
	repositories {
		jcenter()
		mavenCentral()
		gradlePluginDevelopment()
	}
}

// Configure Documentation
subprojects { prj ->
	pluginManager.apply('dev.gradleplugins.documentation.dsl-reference')
	pluginManager.apply('dev.gradleplugins.documentation.api-reference')
	pluginManager.apply('dev.gradleplugins.documentation.javadoc-render')
	prj.configurations.matching { it.name == 'implementation' }.all { implementation ->
		prj.extensions.components.apiReference {
			dependencies.api.asConfiguration.extendsFrom(implementation)
		}
	}
	prj.configurations.matching { it.name == 'compileOnly' }.all { compileOnly ->
		prj.extensions.components.apiReference {
			dependencies.api.asConfiguration.extendsFrom(compileOnly)
		}
	}
	tasks.named('generateDslReference') {
		templateFile = rootProject.file('subprojects/docs/src/docs/dsl/dsl.template')
	}
}
