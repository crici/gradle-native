plugins {
	id 'dev.gradleplugins.gradle-plugin-development' version '1.1'
}

rootProject.name = 'gradle-native'

// Use local repository if available
if (file('../docs-gradle-plugins')) {
	includeBuild '../docs-gradle-plugins'
} else {
	sourceControl {
		gitRepository(uri('https://github.com/nokeedev/docs-gradle-plugins')) {
			producesModule('dev.nokee.docs:docs-gradle-plugins')
		}
	}
}

includeBuild 'subprojects/templates'
includeBuild 'gradle/plugins/docs-gradle-plugin'

include 'coreExec'
project(':coreExec').projectDir = file('subprojects/core-exec')
project(':coreExec').buildFileName = 'core-exec.gradle'

include 'distributions'
project(':distributions').projectDir = file('subprojects/distributions')
project(':distributions').buildFileName = 'distributions.gradle'

include 'distributions:all'
project(':distributions:all').projectDir = file('subprojects/distributions/all')
project(':distributions:all').buildFileName = 'distributions-all.gradle'

include 'distributions:bom'
project(':distributions:bom').projectDir = file('subprojects/distributions/bom')
project(':distributions:bom').buildFileName = 'distributions-bom.gradle'

include 'ideXcode'
project(':ideXcode').projectDir = file('subprojects/ide-xcode')
project(':ideXcode').buildFileName = 'ide-xcode.gradle'

include 'languageNative'
project(':languageNative').projectDir = file('subprojects/language-native')
project(':languageNative').buildFileName = 'language-native.gradle'

include 'platformBase'
project(':platformBase').projectDir = file('subprojects/platform-base')
project(':platformBase').buildFileName = 'platform-base.gradle'

include 'platformNative'
project(':platformNative').projectDir = file('subprojects/platform-native')
project(':platformNative').buildFileName = 'platform-native.gradle'

include 'platformIos'
project(':platformIos').projectDir = file('subprojects/platform-ios')
project(':platformIos').buildFileName = 'platform-ios.gradle'

include 'platformJni'
project(':platformJni').projectDir = file('subprojects/platform-jni')
project(':platformJni').buildFileName = 'platform-jni.gradle'

include 'runtimeBase'
project(':runtimeBase').projectDir = file('subprojects/runtime-base')
project(':runtimeBase').buildFileName = 'runtime-base.gradle'

include 'runtimeNative'
project(':runtimeNative').projectDir = file('subprojects/runtime-native')
project(':runtimeNative').buildFileName = 'runtime-native.gradle'

include 'runtimeDarwin'
project(':runtimeDarwin').projectDir = file('subprojects/runtime-darwin')
project(':runtimeDarwin').buildFileName = 'runtime-darwin.gradle'

include 'testingXctest'
project(':testingXctest').projectDir = file('subprojects/testing-xctest')
project(':testingXctest').buildFileName = 'testing-xctest.gradle'

include 'docs'
project(':docs').projectDir = file('subprojects/docs')
project(':docs').buildFileName = 'docs.gradle'

plugins.withId('com.gradle.enterprise') {
	gradleEnterprise {
		buildScan {
			termsOfServiceUrl = "https://gradle.com/terms-of-service"
			termsOfServiceAgree = "yes"

			if (System.getenv('CI')) {
				tag 'CI'
				value('Git Commit SHA', System.getenv('CI_COMMIT_SHA'))
				value('GitLab Runner', System.getenv('CI_RUNNER_DESCRIPTION'))
			} else {
				tag 'LOCAL'
			}

			obfuscation {
				username { name -> 'super-human' }
				hostname { host -> 'somewhere' }
				ipAddresses { addresses -> addresses.collect { '1.2.3.4' } }
			}
		}
	}
}
