plugins {
	id 'dev.gradleplugins.java-gradle-plugin'
	id 'maven-publish'
}

repositories {
	jcenter()
}

dependencies {
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	implementation project(':coreExec') // for build adapter
	implementation project(':platformNative')
	implementation "com.google.guava:guava:${guavaVersion}"
	implementation "commons-io:commons-io:${commonsIoVersion}"
	implementation 'com.google.code.gson:gson:2.8.6'

	implementation 'org.eclipse.jgit:org.eclipse.jgit:5.8.0.202006091008-r'
}

gradlePlugin {
	plugins {
		cmakeBuildAdapter {
			id = 'dev.nokee.cmake-build-adapter'
			implementationClass = 'dev.nokee.buildadapter.cmake.internal.plugins.CmakeBuildAdapterPlugin'
		}
		patcher {
			id = 'dev.nokee.injectable-source-dependency-plugins'
			implementationClass = 'dev.nokee.buildadapter.cmake.internal.plugins.PatchSourceDependenciesInjectablePluginsPlugin'
		}
	}
}

abstract class WriteVersionTask extends DefaultTask {
	@Input
	abstract Property<String> getVersion()

	@OutputFile
	abstract RegularFileProperty getOutputFile()

	@TaskAction
	private void create() {
		outputFile.get().asFile.text = version.get()
	}
}
def versionTask = tasks.register('writeVersion', WriteVersionTask) {
	outputFile = layout.buildDirectory.file('version.txt')
	version = provider { project.version.toString() }
}
tasks.named('processResources', ProcessResources) {
	it.from(versionTask.flatMap { it.outputFile })
}

functionalTest {
	dependencies {
		pluginUnderTestMetadata project(':platformNative')
		implementation project(':platformNative')
		implementation project(':testingBase')
		implementation 'dev.nokee:templates:latest.integration'
	}
}
